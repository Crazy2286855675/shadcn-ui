import fs from "fs"
import path, { basename } from "path"

import { registry } from "../registry/registry"
import { registrySchema } from "../registry/schema"
import { styles } from "../registry/styles"

const result = registrySchema.safeParse(registry)

if (!result.success) {
  console.error(result.error)
  process.exit(1)
}

let index = `// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index = {
`

for (const style of styles) {
  index += `  "${style.name}": {`

  // Build style index.
  for (const item of result.data) {
    if (item.type === "components:ui") {
      continue
    }

    const type = item.type.split(":")[1]
    index += `
    "${item.name}": {
      component: React.lazy(() => import("@/registry/${style.name}/${type}/${item.name}")),
    },`
  }

  index += `
  },`
}

index += `
}
`

// Write style index.
fs.writeFileSync(
  path.join(process.cwd(), "registry/__index__/index.tsx"),
  index
)

// const payload = result.data
//   .map((entry) => {
//     const files = entry.files?.map((file) => {
//       const content = fs.readFileSync(path.join(process.cwd(), file), "utf8")

//       return {
//         name: basename(file),
//         content,
//       }
//     })

//     return {
//       ...entry,
//       files,
//     }
//   })
//   .sort((a, b) => {
//     if (a.name < b.name) {
//       return -1
//     }
//     if (a.name > b.name) {
//       return 1
//     }
//     return 0
//   })

// fs.writeFileSync(
//   path.join(process.cwd(), "app/api/registry/registry.json"),
//   JSON.stringify(payload, null, 2)
// )

// // Build component styles.
// for (const style of styles) {
//   console.log()
// }

// console.log("Done!")
