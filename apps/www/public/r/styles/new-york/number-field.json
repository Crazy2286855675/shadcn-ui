{
  "name": "number-field",
  "type": "registry:ui",
  "dependencies": [
    "react-aria",
    "react-stately",
    "@react-types/shared"
  ],
  "registryDependencies": [
    "button",
    "input"
  ],
  "files": [
    {
      "path": "ui/number-field.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { type ValidationResult } from \"@react-types/shared\"\nimport clsx from \"clsx\"\nimport { ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\nimport {\n  AriaNumberFieldProps,\n  useButton,\n  useLocale,\n  useNumberField,\n  type NumberFieldAria,\n} from \"react-aria\"\nimport {\n  NumberFieldState,\n  NumberFieldStateOptions,\n  useNumberFieldState,\n} from \"react-stately\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport { Input } from \"@/registry/new-york/ui/input\"\n\ninterface NumberFieldContextValue {\n  numberFieldProps: NumberFieldAria\n  inputRef?: React.RefObject<HTMLInputElement>\n  btnPosition?: \"inside\" | \"outside\"\n  labelPosition?: \"left\" | \"top\"\n  errorMessage?: React.ReactNode | ((v: ValidationResult) => React.ReactNode)\n}\nconst NumberFieldContext = React.createContext<NumberFieldContextValue>(\n  {} as NumberFieldContextValue\n)\n\nconst useNumberFieldContext = () => {\n  const numberFieldContext = React.useContext(NumberFieldContext)\n  if (!numberFieldContext) {\n    throw new Error(\"useNumberFieldContext should be used within <NumberField>\")\n  }\n  return numberFieldContext\n}\n\ntype NumberFieldRef = Partial<HTMLDivElement> & {\n  state: NumberFieldState\n  numberFieldProps: NumberFieldAria\n}\ntype NumberFieldProps = React.PropsWithChildren<\n  Partial<AriaNumberFieldProps> & {\n    name?: string\n    className?: string\n    btnPosition?: \"inside\" | \"outside\"\n    labelPosition?: \"left\" | \"top\"\n  } & Partial<Pick<NumberFieldStateOptions, \"locale\">>\n>\nconst NumberField = React.forwardRef<NumberFieldRef, NumberFieldProps>(\n  (\n    {\n      children,\n      className,\n      btnPosition = \"inside\",\n      labelPosition = \"top\",\n      locale: customLocale,\n      errorMessage,\n      validationBehavior = \"native\",\n      ...props\n    },\n    ref\n  ) => {\n    const hookLocale = useLocale().locale\n    const locale = customLocale || hookLocale\n    props.label = props.label || props.name || \"label\"\n\n    const state = useNumberFieldState({\n      ...props,\n      locale,\n      errorMessage,\n      validationBehavior,\n    })\n\n    const inputRef = React.useRef<HTMLInputElement>(null)\n    const numberFieldProps = useNumberField(\n      { ...props, errorMessage, validationBehavior },\n      state,\n      inputRef\n    )\n\n    numberFieldProps.inputProps.name = props.name\n\n    return (\n      <NumberFieldContext.Provider\n        value={{\n          numberFieldProps,\n          inputRef,\n          btnPosition,\n          labelPosition,\n          errorMessage,\n        }}\n      >\n        <div\n          ref={ref as React.ForwardedRef<HTMLDivElement>}\n          {...numberFieldProps.groupProps}\n          className={cn(\n            \"grid\",\n            labelPosition === \"left\"\n              ? \"grid-cols-[auto_1fr] grid-rows-[1fr_auto] gap-x-1\"\n              : \" grid-cols-1 grid-rows-[auto_1fr_auto]\",\n            className\n          )}\n        >\n          {children}\n        </div>\n      </NumberFieldContext.Provider>\n    )\n  }\n)\nNumberField.displayName = \"NumberField\"\n\ntype NumberFieldGroupProps = {\n  className?: string\n  children: React.ReactNode\n}\nconst NumberFieldGroup = React.forwardRef<\n  HTMLDivElement,\n  NumberFieldGroupProps\n>(({ className, children }, ref) => {\n  const {\n    numberFieldProps: { groupProps },\n  } = useNumberFieldContext()\n  return (\n    <div\n      ref={ref}\n      className={cn(\"relative flex gap-1\", className)}\n      {...groupProps}\n    >\n      {children}\n    </div>\n  )\n})\nNumberFieldGroup.displayName = \"NumberFieldGroup\"\n\ntype NumberFieldIncrementProps = {\n  className?: string\n  children?: React.ReactNode\n}\nconst NumberFieldIncrement = React.forwardRef<\n  HTMLButtonElement,\n  NumberFieldIncrementProps\n>(({ className, children }, ref) => {\n  const {\n    numberFieldProps: { incrementButtonProps },\n    btnPosition,\n  } = useNumberFieldContext()\n\n  const { buttonProps } = useButton(\n    incrementButtonProps,\n    ref as React.RefObject<HTMLButtonElement | null>\n  )\n\n  return (\n    <Button\n      className={clsx(\n        \"focus-visible:ring-0 focus-visible:ring-offset-0\",\n        btnPosition === \"outside\"\n          ? \"px-3 py-2\"\n          : \"absolute right-0 top-0 z-10 flex h-1/2 w-6 items-center justify-center rounded-b-none p-0 focus-visible:outline-none\",\n        className\n      )}\n      variant=\"outline\"\n      {...buttonProps}\n      ref={ref}\n    >\n      {children || <ChevronUpIcon className=\"h-4 w-4\" />}\n    </Button>\n  )\n})\nNumberFieldIncrement.displayName = \"NumberFieldIncrement\"\n\ntype NumberFieldDecrementProps = {\n  children?: React.ReactNode\n  className?: string\n}\nconst NumberFieldDecrement = React.forwardRef<\n  HTMLButtonElement,\n  NumberFieldDecrementProps\n>(({ className, children }, ref) => {\n  const {\n    numberFieldProps: { decrementButtonProps },\n    btnPosition,\n  } = useNumberFieldContext()\n\n  const { buttonProps } = useButton(\n    decrementButtonProps,\n    ref as React.RefObject<HTMLButtonElement | null>\n  )\n\n  return (\n    <Button\n      className={clsx(\n        \"focus-visible:ring-0 focus-visible:ring-offset-0\",\n        btnPosition === \"outside\"\n          ? \"px-3 py-2\"\n          : \"absolute bottom-0 right-0 z-10 flex h-1/2 w-6 items-center justify-center rounded-t-none p-0 focus-visible:outline-none\",\n        className\n      )}\n      variant=\"outline\"\n      {...buttonProps}\n      ref={ref}\n    >\n      {children || <ChevronDownIcon className=\"h-4 w-4\" />}\n    </Button>\n  )\n})\nNumberFieldDecrement.displayName = \"NumberFieldDecrement\"\n\ntype NumberFieldInputProps = { className?: string }\nconst NumberFieldInput = React.forwardRef<\n  HTMLInputElement,\n  NumberFieldInputProps\n>(({ className }, ref) => {\n  const {\n    numberFieldProps: { inputProps, isInvalid },\n    inputRef,\n  } = useNumberFieldContext()\n\n  React.useEffect(() => {\n    if (ref && \"current\" in ref && inputRef?.current) {\n      ref.current = inputRef?.current\n    }\n  }, [inputRef, ref])\n\n  return (\n    <Input\n      ref={inputRef}\n      type=\"number\"\n      className={clsx(\n        { \"focus-visible:ring-destructive\": isInvalid },\n        className\n      )}\n      {...inputProps}\n    />\n  )\n})\nNumberFieldInput.displayName = \"NumberFieldInput\"\n\ntype NumberFieldLabelProps = {\n  className?: string\n  children: React.ReactNode\n}\nconst NumberFieldLabel = React.forwardRef<\n  HTMLLabelElement,\n  NumberFieldLabelProps\n>(({ className, children }, ref) => {\n  const {\n    numberFieldProps: { labelProps },\n    labelPosition,\n  } = useNumberFieldContext()\n\n  return (\n    <label\n      ref={ref}\n      {...labelProps}\n      className={cn(\n        labelPosition === \"left\" && \"flex items-center justify-center\",\n        className\n      )}\n    >\n      {children}\n    </label>\n  )\n})\nNumberFieldLabel.displayName = \"NumberFieldLabel\"\n\ntype NumberFieldErrorProps = {\n  className?: string\n  // children?: React.ReactNode;\n}\nconst NumberFieldError = React.forwardRef<\n  HTMLDivElement,\n  NumberFieldErrorProps\n>(({ className }, ref) => {\n  const {\n    numberFieldProps: {\n      errorMessageProps,\n      isInvalid,\n      validationErrors,\n      validationDetails,\n    },\n    errorMessage,\n    labelPosition,\n  } = useNumberFieldContext()\n\n  let errorMessageString: React.ReactNode = null\n  if (typeof errorMessage === \"function\") {\n    errorMessageString =\n      isInvalid && validationErrors != null && validationDetails != null\n        ? errorMessage({\n            isInvalid,\n            validationErrors,\n            validationDetails,\n          })\n        : null\n  } else if (errorMessage) {\n    errorMessageString = errorMessage\n  } else {\n    errorMessageString = validationErrors\n  }\n\n  return (\n    <div\n      ref={ref}\n      {...errorMessageProps}\n      className={cn(\n        \"text-destructive\",\n        labelPosition === \"left\" && \"col-start-2\",\n        className\n      )}\n    >\n      {isInvalid && errorMessageString}\n    </div>\n  )\n})\nNumberFieldError.displayName = \"NumberFieldError\"\n\nexport {\n  NumberField,\n  NumberFieldDecrement,\n  NumberFieldGroup,\n  NumberFieldIncrement,\n  NumberFieldInput,\n  NumberFieldLabel,\n  NumberFieldError,\n}\n\nexport type {\n  NumberFieldRef,\n  NumberFieldProps,\n  NumberFieldDecrementProps,\n  NumberFieldGroupProps,\n  NumberFieldIncrementProps,\n  NumberFieldInputProps,\n  NumberFieldLabelProps,\n  NumberFieldErrorProps,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}