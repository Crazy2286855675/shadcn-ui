{
  "name": "input",
  "type": "registry:ui",
  "files": [
    {
      "path": "ui/input.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { useComposition } from \"@/registry/default/hooks/use-composition\"\n\ninterface InputComposition {\n  IconLeft: typeof InputIconLeft\n  IconRight: typeof InputIconRight\n}\n\nconst iconVariants = cva(\"absolute left-3 top-3\", {\n  variants: {\n    size: {\n      default: \"h-3 w-3\",\n    },\n  },\n  defaultVariants: {\n    size: \"default\",\n  },\n})\n\nexport interface InputIconProps\n  extends React.HTMLAttributes<HTMLOrSVGElement>,\n    VariantProps<typeof iconVariants> {}\n\nconst InputIconLeft = React.forwardRef<HTMLSlotElement, InputIconProps>(\n  ({ children, className, size }, ref) => {\n    return (\n      <Slot ref={ref} className={cn(iconVariants({ size }), className)}>\n        {children}\n      </Slot>\n    )\n  }\n)\nInputIconLeft.displayName = \"InputIconLeft\"\n\nconst InputIconRight = React.forwardRef<HTMLSlotElement, InputIconProps>(\n  ({ children, className, size }, ref) => {\n    return (\n      <Slot ref={ref} className={cn(iconVariants({ size }), className)}>\n        {children}\n      </Slot>\n    )\n  }\n)\nInputIconRight.displayName = \"InputIconRight\"\n\nconst inputVariants = cva(\n  \"flex h-9 w-full rounded-md border border-input bg-transparent py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n  {\n    variants: {\n      composition: {\n        true: \"px-9\",\n        false: \"px-3\",\n      },\n    },\n    defaultVariants: {\n      composition: false,\n    },\n  }\n)\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return <input type={type} className={className} ref={ref} {...props} />\n  }\n)\nInput.displayName = \"Input\"\n\nconst Root = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ children, className, ...props }, ref) => {\n    const IconLeft = useComposition(children, \"InputIconLeft\")\n    const IconRight = useComposition(children, \"InputIconRight\")\n\n    if (IconLeft || IconRight) {\n      return (\n        <div className=\"relative\">\n          {IconLeft}\n          <Input\n            ref={ref}\n            className={cn(\n              inputVariants({ composition: !!IconLeft || !!IconRight }),\n              className\n            )}\n            {...props}\n          />\n          {IconRight}\n        </div>\n      )\n    }\n    return (\n      <Input\n        ref={ref}\n        className={cn(\n          inputVariants({ composition: !!IconLeft || !!IconRight }),\n          className\n        )}\n        {...props}\n      />\n    )\n  }\n) as React.ForwardRefExoticComponent<\n  InputProps & React.RefAttributes<HTMLInputElement>\n> &\n  InputComposition\n\nRoot.displayName = \"Input\"\nRoot.IconLeft = InputIconLeft\nRoot.IconRight = InputIconRight\n\nexport { Root as Input }\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}