{
  "name": "chart-area-interactive",
  "type": "registry:block",
  "description": "An interactive area chart",
  "registryDependencies": [
    "card",
    "chart",
    "select"
  ],
  "files": [
    {
      "path": "block/chart-area-interactive.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Area, AreaChart, CartesianGrid, XAxis } from \"recharts\"\n\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/registry/new-york/ui/card\"\nimport {\n  ChartConfig,\n  ChartContainer,\n  ChartLegend,\n  ChartLegendContent,\n  ChartTooltip,\n  ChartTooltipContent,\n} from \"@/registry/new-york/ui/chart\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/registry/new-york/ui/select\"\nconst chartData = [\n  { desktop: 222, mobile: 150 },\n  { desktop: 97, mobile: 180 },\n  { desktop: 167, mobile: 120 },\n  { desktop: 242, mobile: 260 },\n  { desktop: 373, mobile: 290 },\n  { desktop: 301, mobile: 340 },\n  { desktop: 245, mobile: 180 },\n  { desktop: 409, mobile: 320 },\n  { desktop: 59, mobile: 110 },\n  { desktop: 261, mobile: 190 },\n  { desktop: 327, mobile: 350 },\n  { desktop: 292, mobile: 210 },\n  { desktop: 342, mobile: 380 },\n  { desktop: 137, mobile: 220 },\n  { desktop: 120, mobile: 170 },\n  { desktop: 138, mobile: 190 },\n  { desktop: 446, mobile: 360 },\n  { desktop: 364, mobile: 410 },\n  { desktop: 243, mobile: 180 },\n  { desktop: 89, mobile: 150 },\n  { desktop: 137, mobile: 200 },\n  { desktop: 224, mobile: 170 },\n  { desktop: 138, mobile: 230 },\n  { desktop: 387, mobile: 290 },\n  { desktop: 215, mobile: 250 },\n  { desktop: 75, mobile: 130 },\n  { desktop: 383, mobile: 420 },\n  { desktop: 122, mobile: 180 },\n  { desktop: 315, mobile: 240 },\n  { desktop: 454, mobile: 380 },\n  { desktop: 165, mobile: 220 },\n  { desktop: 293, mobile: 310 },\n  { desktop: 247, mobile: 190 },\n  { desktop: 385, mobile: 420 },\n  { desktop: 481, mobile: 390 },\n  { desktop: 498, mobile: 520 },\n  { desktop: 388, mobile: 300 },\n  { desktop: 149, mobile: 210 },\n  { desktop: 227, mobile: 180 },\n  { desktop: 293, mobile: 330 },\n  { desktop: 335, mobile: 270 },\n  { desktop: 197, mobile: 240 },\n  { desktop: 197, mobile: 160 },\n  { desktop: 448, mobile: 490 },\n  { desktop: 473, mobile: 380 },\n  { desktop: 338, mobile: 400 },\n  { desktop: 499, mobile: 420 },\n  { desktop: 315, mobile: 350 },\n  { desktop: 235, mobile: 180 },\n  { desktop: 177, mobile: 230 },\n  { desktop: 82, mobile: 140 },\n  { desktop: 81, mobile: 120 },\n  { desktop: 252, mobile: 290 },\n  { desktop: 294, mobile: 220 },\n  { desktop: 201, mobile: 250 },\n  { desktop: 213, mobile: 170 },\n  { desktop: 420, mobile: 460 },\n  { desktop: 233, mobile: 190 },\n  { desktop: 78, mobile: 130 },\n  { desktop: 340, mobile: 280 },\n  { desktop: 178, mobile: 230 },\n  { desktop: 178, mobile: 200 },\n  { desktop: 470, mobile: 410 },\n  { desktop: 103, mobile: 160 },\n  { desktop: 439, mobile: 380 },\n  { desktop: 88, mobile: 140 },\n  { desktop: 294, mobile: 250 },\n  { desktop: 323, mobile: 370 },\n  { desktop: 385, mobile: 320 },\n  { desktop: 438, mobile: 480 },\n  { desktop: 155, mobile: 200 },\n  { desktop: 92, mobile: 150 },\n  { desktop: 492, mobile: 420 },\n  { desktop: 81, mobile: 130 },\n  { desktop: 426, mobile: 380 },\n  { desktop: 307, mobile: 350 },\n  { desktop: 371, mobile: 310 },\n  { desktop: 475, mobile: 520 },\n  { desktop: 107, mobile: 170 },\n  { desktop: 341, mobile: 290 },\n  { desktop: 408, mobile: 450 },\n  { desktop: 169, mobile: 210 },\n  { desktop: 317, mobile: 270 },\n  { desktop: 480, mobile: 530 },\n  { desktop: 132, mobile: 180 },\n  { desktop: 141, mobile: 190 },\n  { desktop: 434, mobile: 380 },\n  { desktop: 448, mobile: 490 },\n  { desktop: 149, mobile: 200 },\n  { desktop: 103, mobile: 160 },\n  { desktop: 446, mobile: 400 },\n]\n  .map((entry, index) => {\n    const today = new Date()\n    const date = new Date(new Date().setDate(today.getDate() - index))\n      .toISOString()\n      .split(\"T\")[0]\n\n    return { ...entry, date }\n  })\n  .reverse()\n\nconst chartConfig = {\n  visitors: {\n    label: \"Visitors\",\n  },\n  desktop: {\n    label: \"Desktop\",\n    color: \"hsl(var(--chart-1))\",\n  },\n  mobile: {\n    label: \"Mobile\",\n    color: \"hsl(var(--chart-2))\",\n  },\n} satisfies ChartConfig\n\nexport default function Component() {\n  const [timeRange, setTimeRange] = React.useState(\"90d\")\n\n  const filteredData = chartData.filter((item) => {\n    const date = new Date(item.date)\n    const now = new Date()\n    let daysToSubtract = 90\n    if (timeRange === \"30d\") {\n      daysToSubtract = 30\n    } else if (timeRange === \"7d\") {\n      daysToSubtract = 7\n    }\n    now.setDate(now.getDate() - daysToSubtract)\n    return date >= now\n  })\n\n  return (\n    <Card>\n      <CardHeader className=\"flex items-center gap-2 space-y-0 border-b py-5 sm:flex-row\">\n        <div className=\"grid flex-1 gap-1 text-center sm:text-left\">\n          <CardTitle>Area Chart - Interactive</CardTitle>\n          <CardDescription>\n            Showing total visitors for the last 3 months\n          </CardDescription>\n        </div>\n        <Select value={timeRange} onValueChange={setTimeRange}>\n          <SelectTrigger\n            className=\"w-[160px] rounded-lg sm:ml-auto\"\n            aria-label=\"Select a value\"\n          >\n            <SelectValue placeholder=\"Last 3 months\" />\n          </SelectTrigger>\n          <SelectContent className=\"rounded-xl\">\n            <SelectItem value=\"90d\" className=\"rounded-lg\">\n              Last 3 months\n            </SelectItem>\n            <SelectItem value=\"30d\" className=\"rounded-lg\">\n              Last 30 days\n            </SelectItem>\n            <SelectItem value=\"7d\" className=\"rounded-lg\">\n              Last 7 days\n            </SelectItem>\n          </SelectContent>\n        </Select>\n      </CardHeader>\n      <CardContent className=\"px-2 pt-4 sm:px-6 sm:pt-6\">\n        <ChartContainer\n          config={chartConfig}\n          className=\"aspect-auto h-[250px] w-full\"\n        >\n          <AreaChart data={filteredData}>\n            <defs>\n              <linearGradient id=\"fillDesktop\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop\n                  offset=\"5%\"\n                  stopColor=\"var(--color-desktop)\"\n                  stopOpacity={0.8}\n                />\n                <stop\n                  offset=\"95%\"\n                  stopColor=\"var(--color-desktop)\"\n                  stopOpacity={0.1}\n                />\n              </linearGradient>\n              <linearGradient id=\"fillMobile\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop\n                  offset=\"5%\"\n                  stopColor=\"var(--color-mobile)\"\n                  stopOpacity={0.8}\n                />\n                <stop\n                  offset=\"95%\"\n                  stopColor=\"var(--color-mobile)\"\n                  stopOpacity={0.1}\n                />\n              </linearGradient>\n            </defs>\n            <CartesianGrid vertical={false} />\n            <XAxis\n              dataKey=\"date\"\n              tickLine={false}\n              axisLine={false}\n              tickMargin={8}\n              minTickGap={32}\n              tickFormatter={(value) => {\n                const date = new Date(value)\n                return date.toLocaleDateString(\"en-US\", {\n                  month: \"short\",\n                  day: \"numeric\",\n                })\n              }}\n            />\n            <ChartTooltip\n              cursor={false}\n              content={\n                <ChartTooltipContent\n                  labelFormatter={(value) => {\n                    return new Date(value).toLocaleDateString(\"en-US\", {\n                      month: \"short\",\n                      day: \"numeric\",\n                    })\n                  }}\n                  indicator=\"dot\"\n                />\n              }\n            />\n            <Area\n              dataKey=\"mobile\"\n              type=\"natural\"\n              fill=\"url(#fillMobile)\"\n              stroke=\"var(--color-mobile)\"\n              stackId=\"a\"\n            />\n            <Area\n              dataKey=\"desktop\"\n              type=\"natural\"\n              fill=\"url(#fillDesktop)\"\n              stroke=\"var(--color-desktop)\"\n              stackId=\"a\"\n            />\n            <ChartLegend content={<ChartLegendContent />} />\n          </AreaChart>\n        </ChartContainer>\n      </CardContent>\n    </Card>\n  )\n}\n",
      "type": "registry:component"
    }
  ]
}