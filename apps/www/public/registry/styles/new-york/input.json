{
  "name": "input",
  "files": [
    {
      "name": "input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n"
    },
    {
      "name": "input.stories.tsx",
      "content": "import type { Meta, StoryObj } from \"@storybook/react\"\n\nimport { Input } from \"@/registry/default/ui/input\"\n\n/**\n * Displays a form input field or a component that looks like an input field.\n */\nconst meta = {\n  title: \"ui/Input\",\n  component: Input,\n  tags: [\"autodocs\"],\n  argTypes: {},\n  args: {\n    className: \"w-96\",\n    type: \"email\",\n    placeholder: \"Email\",\n  },\n  parameters: {\n    layout: \"centered\",\n  },\n} satisfies Meta<typeof Input>\n\nexport default meta\n\ntype Story = StoryObj<typeof meta>\n\n/**\n * The default form of the input field.\n */\nexport const Default: Story = {}\n\n/**\n * Use the `disabled` prop to make the input non-interactive and appears faded,\n * indicating that input is not currently accepted.\n */\nexport const Disabled: Story = {\n  args: { disabled: true },\n}\n\n/**\n * Use the `Label` component to includes a clear, descriptive label above or\n * alongside the input area to guide users.\n */\nexport const WithLabel: Story = {\n  render: (args) => (\n    <div className=\"grid items-center gap-1.5\">\n      <label htmlFor=\"email\">{args.placeholder}</label>\n      <Input {...args} id=\"email\" />\n    </div>\n  ),\n}\n\n/**\n * Use a text element below the input field to provide additional instructions\n * or information to users.\n */\nexport const WithHelperText: Story = {\n  render: (args) => (\n    <div className=\"grid items-center gap-1.5\">\n      <label htmlFor=\"email-2\">{args.placeholder}</label>\n      <Input {...args} id=\"email-2\" />\n      <p className=\"text-sm text-foreground/50\">Enter your email address.</p>\n    </div>\n  ),\n}\n\n/**\n * Use the `Button` component to indicate that the input field can be submitted\n * or used to trigger an action.\n */\nexport const WithButton: Story = {\n  render: (args) => (\n    <div className=\"flex items-center space-x-2\">\n      <Input {...args} />\n      <button\n        className=\"rounded bg-primary px-4 py-2 text-primary-foreground\"\n        type=\"submit\"\n      >\n        Subscribe\n      </button>\n    </div>\n  ),\n}\n"
    }
  ],
  "type": "components:ui"
}