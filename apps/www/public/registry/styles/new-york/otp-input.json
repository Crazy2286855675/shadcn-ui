{
  "name": "otp-input",
  "files": [
    {
      "name": "otp-input.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Input } from \"@/registry/new-york/ui/input\";\n\ntype AllowedInputTypes = 'password' | 'text' | 'number' | 'tel';\n\ninterface OTPInputProps\n  extends Pick<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    | \"onPaste\"\n    | \"pattern\"\n    | \"autoFocus\"\n    | \"className\"\n    | \"id\"\n    | \"name\"\n  > {\n  /** Value of the OTP input */\n  value?: string\n  /** Callback to be called when the OTP value changes */\n  onChange?: (otp: string) => void\n  /** Callback to be called when pasting content into the component */\n  onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;\n  /** Number of OTP inputs to be rendered */\n  numInputs?: number\n  /** Placeholder for the inputs */\n  placeholder?: string;\n    /** Type of the input */\n  type?: AllowedInputTypes\n  /** Function to render the separator */\n  renderSeparator?: ((index: number) => React.ReactNode) | React.ReactNode;\n}\n\nexport const OTPInput = ({\n  value = \"\",\n  numInputs = 6,\n  onChange,\n  type = \"text\",\n  placeholder = \"_\",\n  pattern = \"[0-9]\",\n  autoFocus = true,\n  className,\n  id,\n  name,\n  onPaste,\n  renderSeparator,\n  ...rest\n}: OTPInputProps) => {\n  const [otpValue, setOTPValue] = React.useState(value)\n  const [activeInput, setActiveInput] = React.useState(0)\n  const inputRefs = React.useRef<Array<HTMLInputElement | null>>([])\n\n  const getOTPValue = () => (otpValue ? otpValue.toString().split(\"\") : [])\n\n  const isInputNum = type === \"number\" || type === \"tel\"\n\n  React.useEffect(() => {\n    inputRefs.current = inputRefs.current.slice(0, numInputs)\n  }, [numInputs])\n\n  React.useEffect(() => {\n    if (autoFocus) {\n      inputRefs.current[0]?.focus()\n    }\n  }, [autoFocus])\n\n  const isInputValueValid = (value: string) => {\n    const isTypeValid = isInputNum\n      ? !isNaN(Number(value))\n      : typeof value === \"string\"\n    return isTypeValid && value.trim().length === 1\n  }\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target\n\n    if (isInputValueValid(value)) {\n      changeCodeAtFocus(value)\n      focusInput(activeInput + 1)\n    }\n  }\n\n  const handleFocus =\n    (event: React.FocusEvent<HTMLInputElement>) => (index: number) => {\n      setActiveInput(index)\n      event.target.select()\n    }\n\n  const handleBlur = () => {\n    setActiveInput(activeInput - 1)\n  }\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const otp = getOTPValue()\n    if ([event.code, event.key].includes(\"Backspace\")) {\n      event.preventDefault()\n      changeCodeAtFocus(\"\")\n      focusInput(activeInput - 1)\n    } else if (event.code === \"Delete\") {\n      event.preventDefault()\n      changeCodeAtFocus(\"\")\n    } else if (event.code === \"ArrowLeft\") {\n      event.preventDefault()\n      focusInput(activeInput - 1)\n    } else if (event.code === \"ArrowRight\") {\n      event.preventDefault()\n      focusInput(activeInput + 1)\n    }\n    // React does not trigger onChange when the same value is entered\n    // again. So we need to focus the next input manually in this case.\n    else if (event.key === otp[activeInput]) {\n      event.preventDefault()\n      focusInput(activeInput + 1)\n    } else if (\n      event.code === \"Spacebar\" ||\n      event.code === \"Space\" ||\n      event.code === \"ArrowUp\" ||\n      event.code === \"ArrowDown\"\n    ) {\n      event.preventDefault()\n    } else if (isInputNum && !isInputValueValid(event.key)) {\n      event.preventDefault()\n    }\n  }\n\n  const focusInput = (index: number) => {\n    const activeInput = Math.max(Math.min(numInputs - 1, index), 0)\n\n    if (inputRefs.current[activeInput]) {\n      inputRefs.current[activeInput]?.focus()\n      inputRefs.current[activeInput]?.select()\n      setActiveInput(activeInput)\n    }\n  }\n\n  const changeCodeAtFocus = (value: string) => {\n    const otp = getOTPValue()\n    otp[activeInput] = value[0]\n    handleOTPChange(otp)\n  }\n\n  const handleOTPChange = (otp: Array<string>) => {\n    const otpValue = otp.join(\"\")\n    setOTPValue(otpValue)\n    onChange?.(otpValue)\n  }\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    event.preventDefault()\n\n    const otp = getOTPValue()\n    let nextActiveInput = activeInput\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const pastedData = event.clipboardData\n      .getData(\"text/plain\")\n      .slice(0, numInputs - activeInput)\n      .split(\"\")\n\n    // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n    if (isInputNum && pastedData.some((value) => isNaN(Number(value)))) {\n      return\n    }\n\n    // Paste data from focused input onwards\n    for (let pos = 0; pos < numInputs; ++pos) {\n      if (pos >= activeInput && pastedData.length > 0) {\n        otp[pos] = pastedData.shift() ?? \"\"\n        nextActiveInput++\n      }\n    }\n\n    focusInput(nextActiveInput)\n    handleOTPChange(otp)\n  }\n\n  return (\n    <div className=\"flex gap-2 items-center\" onPaste={onPaste}>\n      {Array.from({ length: numInputs }, (_, index) => index).map((i) => (\n        <React.Fragment key={i}>\n          <Input\n            id={`${id}-${i}`}\n            name={`${name}-${i}`}\n            value={getOTPValue()[i] ?? \"\"}\n            placeholder={placeholder}\n            ref={(element) => (inputRefs.current[i] = element)}\n            onChange={handleChange}\n            onFocus={(event) => handleFocus(event)(i)}\n            onBlur={handleBlur}\n            onKeyDown={handleKeyDown}\n            onPaste={handlePaste}\n            autoComplete=\"off\"\n            maxLength={1}\n            size={1}\n            className={cn(\"text-center font-bold\", className)}\n            pattern={pattern}\n            {...rest}\n          />\n          {i < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(i) : renderSeparator)}\n        </React.Fragment>\n      ))}\n      <input type=\"hidden\" id={id} name={name} value={otpValue} />\n    </div>\n  )\n}\n"
    }
  ],
  "type": "components:ui"
}