{
  "name": "avatar-group",
  "files": [
    {
      "name": "avatar-group.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\ninterface AvatarGroupProps {\n  className?: string\n  orientation?: \"horizontal\" | \"vertical\"\n  limit?: number\n  size?: \"small\" | \"medium\" | \"large\"\n  spacing?: string\n  children: React.ReactNode\n}\n\ninterface AvatarWrapperProps {\n  children: React.ReactNode\n  spacing: string\n  index: number\n}\n\nconst AvatarWrapper: React.FC<AvatarWrapperProps> = ({ children, index }) => {\n  return (\n    <div\n      className={cn(\n        \"relative flex shrink-0 items-center justify-center overflow-hidden rounded-full border-2 border-background bg-background text-foreground\"\n      )}\n      style={{\n        zIndex: index !== 0 ? index : undefined,\n      }}\n      role=\"img\"\n      aria-label={`Avatar ${index + 1}`}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport const AvatarGroup = React.forwardRef<HTMLDivElement, AvatarGroupProps>(\n  (\n    {\n      children,\n      className = \"\",\n      orientation = \"horizontal\",\n      limit,\n      spacing = \"0.75rem\",\n      ...props\n    },\n    ref\n  ) => {\n    const childrenArray = React.Children.toArray(children)\n    const limitedChildren = limit\n      ? childrenArray.slice(0, limit)\n      : childrenArray\n\n    const styledChildren = limitedChildren.map((child, index) => (\n      <AvatarWrapper key={index} spacing={spacing} index={index}>\n        {child}\n      </AvatarWrapper>\n    ))\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex select-none\",\n          orientation === \"horizontal\"\n            ? `flex-row -space-x-3`\n            : `flex-col -space-y-3`,\n          className\n        )}\n        {...props}\n      >\n        {styledChildren}\n      </div>\n    )\n  }\n)\n\nAvatarGroup.displayName = \"AvatarGroup\"\n"
    }
  ],
  "type": "components:ui"
}