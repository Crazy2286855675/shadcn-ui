{
  "name": "number-field",
  "dependencies": [
    "react-number-field"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "name": "number-field.tsx",
      "content": "import * as React from \"react\"\nimport { ChevronDownIcon, ChevronUpIcon } from \"@radix-ui/react-icons\"\nimport { NumericFormat, type NumericFormatProps } from \"react-number-format\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { Button, ButtonProps } from \"./button\"\n\ninterface NumberFieldContextProps {\n  value: string | number | null | undefined\n  setValue: React.Dispatch<\n    React.SetStateAction<string | number | null | undefined>\n  >\n  disableNumberField: boolean\n}\nconst NumberFieldContext = React.createContext<\n  NumberFieldContextProps | undefined\n>(undefined)\n\ninterface NumberFieldProps extends React.HTMLAttributes<HTMLDivElement> {\n  disabled?: boolean\n}\nconst NumberField = React.forwardRef<HTMLDivElement, NumberFieldProps>(\n  ({ className, children, disabled = false }, ref) => {\n    const [value, setValue] = React.useState<\n      string | number | null | undefined\n    >(undefined)\n\n    return (\n      <NumberFieldContext.Provider\n        value={{ value, setValue, disableNumberField: disabled }}\n      >\n        <div\n          ref={ref}\n          className={cn(\n            \"relative rounded-md border overflow-hidden flex w-full\",\n            !disabled ? \"focus-within:ring-1 focus-within:ring-ring\" : \"\",\n            className\n          )}\n        >\n          {children}\n        </div>\n      </NumberFieldContext.Provider>\n    )\n  }\n)\n\nconst NumberFieldInput = React.forwardRef<HTMLDivElement, NumericFormatProps>(\n  ({ className, step = 1, ...props }, ref) => {\n    const context = React.useContext(NumberFieldContext)\n\n    React.useEffect(() => {\n      if (!context) return\n      context.setValue(props.value)\n    }, [])\n\n    return (\n      <NumericFormat\n        getInputRef={ref}\n        className={cn(\n          \"h-9 min-w-full px-3 py-1 bg-transparent placeholder:text-muted-foreground text-sm rounded-md border transition-colors outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        disabled={\n          context ? context.disableNumberField || props.disabled : false\n        }\n        value={context ? context.value : props.value}\n        onValueChange={(inputValue, changeMeta) => {\n          context && context.setValue(inputValue.value)\n          props.onValueChange && props.onValueChange(inputValue, changeMeta)\n        }}\n        {...props}\n      />\n    )\n  }\n)\n\ninterface NumberFieldStepperProps extends ButtonProps {\n  step?: number\n}\nconst NumberFieldIncrement = React.forwardRef<\n  HTMLButtonElement,\n  NumberFieldStepperProps\n>(({ className, variant, size, asChild = false, step = 1, ...props }, ref) => {\n  const context = React.useContext(NumberFieldContext)\n\n  if (!context) {\n    throw new Error(\n      \"NumberFieldIncrement must be used within a NumberField component\"\n    )\n  }\n\n  return (\n    <Button\n      ref={ref}\n      className={cn(\n        \"border-r-0 border-t-0 w-full h-full text-muted-foreground hover:text-foreground p-0 rounded-none flex flex-col justify-center align-center\",\n        \"absolute top-0 right-0 h-1/2 w-6\",\n        className\n      )}\n      variant=\"outline\"\n      onClick={() => context.setValue(Number(context.value || 0) + step)}\n      disabled={context ? context.disableNumberField || props.disabled : false}\n      {...props}\n    >\n      <ChevronUpIcon />\n    </Button>\n  )\n})\nNumberFieldIncrement.displayName = \"NumberFieldIncrement\"\n\nconst NumberFieldDecrement = React.forwardRef<\n  HTMLButtonElement,\n  NumberFieldStepperProps\n>(({ className, variant, size, asChild = false, step = 1, ...props }, ref) => {\n  const context = React.useContext(NumberFieldContext)\n\n  if (!context) {\n    throw new Error(\n      \"NumberFieldDecrement must be used within a NumberField component\"\n    )\n  }\n\n  return (\n    <Button\n      ref={ref}\n      className={cn(\n        \"border-r-0 border-b-0 w-full h-full text-muted-foreground hover:text-foreground p-0 rounded-none flex flex-col justify-center align-center\",\n        \"absolute bottom-0 right-0 h-1/2 w-6\",\n        className\n      )}\n      variant=\"outline\"\n      onClick={() => context.setValue(Number(context.value || 0) - step)}\n      disabled={context ? context.disableNumberField || props.disabled : false}\n      {...props}\n    >\n      <ChevronDownIcon />\n    </Button>\n  )\n})\nNumberFieldDecrement.displayName = \"NumberFieldDecrement\"\n\nexport {\n  NumberField,\n  NumberFieldInput,\n  NumberFieldIncrement,\n  NumberFieldDecrement,\n}\n"
    }
  ],
  "type": "components:ui"
}