{
  "name": "number-field",
  "dependencies": [
    "react-number-field"
  ],
  "registryDependencies": [
    "button"
  ],
  "files": [
    {
      "name": "number-field.tsx",
      "content": "import * as React from \"react\"\nimport { ChevronDownIcon, ChevronUpIcon } from \"@radix-ui/react-icons\"\nimport {\n  NumberFormatBase,\n  useNumericFormat,\n  type NumberFormatBaseProps,\n  type NumberFormatValues,\n  type NumericFormatProps,\n} from \"react-number-format\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { Button, ButtonProps } from \"./button\"\n\ninterface NumberFieldContextProps {\n  delta: number\n  setDelta: React.Dispatch<React.SetStateAction<number>>\n  disableNumberField: boolean\n}\nconst NumberFieldContext = React.createContext<\n  NumberFieldContextProps | undefined\n>(undefined)\n\ninterface NumberFieldProps extends React.HTMLAttributes<HTMLDivElement> {\n  disabled?: boolean\n}\nconst NumberField = React.forwardRef<HTMLDivElement, NumberFieldProps>(\n  ({ className, children, disabled = false }, ref) => {\n    const [delta, setDelta] = React.useState<number>(0)\n\n    return (\n      <NumberFieldContext.Provider\n        value={{ delta, setDelta, disableNumberField: disabled }}\n      >\n        <div\n          ref={ref}\n          className={cn(\n            \"relative rounded-md border overflow-hidden w-fit\",\n            !disabled ? \"focus-within:ring-1 focus-within:ring-ring\" : \"\",\n            className\n          )}\n        >\n          {children}\n        </div>\n      </NumberFieldContext.Provider>\n    )\n  }\n)\n\nconst convertToNumber = (value: string | number | null | undefined) => {\n  if (typeof value === \"number\") return value\n  const parsed = parseFloat(`${value}`)\n  return isNaN(parsed) ? undefined : parsed\n}\n\ninterface NumberFieldInputProps\n  extends Omit<NumericFormatProps & NumberFormatBaseProps, \"onValueChange\"> {\n  onValueChange?: (value: number) => void\n}\nconst NumberFieldInput = React.forwardRef<\n  HTMLInputElement,\n  NumberFieldInputProps\n>(({ className, onValueChange, ...props }, ref) => {\n  const isControlled = props.value !== undefined\n  const context = React.useContext(NumberFieldContext)\n  const [value, setValue] = React.useState(\n    convertToNumber(props.value || props.defaultValue)\n  )\n  const numericFormat = useNumericFormat({\n    ...props,\n    value: isControlled ? props.value : value,\n  })\n\n  React.useEffect(() => {\n    if (!context || context.delta === 0) return\n    const newValue = (value || 0) + context.delta\n\n    if (\n      numericFormat &&\n      numericFormat.isAllowed &&\n      !numericFormat.isAllowed({ floatValue: newValue } as NumberFormatValues)\n    )\n      return\n    setValue(newValue)\n    onValueChange && onValueChange(newValue)\n    context.setDelta(0)\n  }, [context?.delta])\n\n  return (\n    <NumberFormatBase\n      getInputRef={ref}\n      className={cn(\n        \"h-9 w-full px-3 py-1 bg-transparent placeholder:text-muted-foreground text-sm rounded-md transition-colors outline-none disabled:cursor-not-allowed disabled:opacity-50\",\n        !context ? \"border focus:ring-1 focus:ring-ring\" : \"\",\n        className\n      )}\n      disabled={context ? context.disableNumberField || props.disabled : false}\n      {...numericFormat}\n      {...(props.format && { format: props.format })}\n      onValueChange={(inputValue) => {\n        if (!inputValue.floatValue) return\n        setValue(inputValue.floatValue)\n        onValueChange && onValueChange(inputValue.floatValue)\n      }}\n    />\n  )\n})\n\ninterface NumberFieldStepperProps extends ButtonProps {\n  step?: number\n}\nconst NumberFieldIncrement = React.forwardRef<\n  HTMLButtonElement,\n  NumberFieldStepperProps\n>(({ className, variant, size, asChild = false, step = 1, ...props }, ref) => {\n  const context = React.useContext(NumberFieldContext)\n\n  if (!context) {\n    throw new Error(\n      \"NumberFieldIncrement must be used within a NumberField component\"\n    )\n  }\n\n  return (\n    <Button\n      ref={ref}\n      className={cn(\n        \"border-r-0 border-t-0 w-full h-full text-muted-foreground hover:text-foreground p-0 rounded-none flex flex-col justify-center align-center\",\n        \"absolute top-0 right-0 h-1/2 w-6\",\n        className\n      )}\n      variant=\"outline\"\n      onClick={() => context.setDelta(step)}\n      disabled={context ? context.disableNumberField || props.disabled : false}\n      {...props}\n    >\n      <ChevronUpIcon />\n    </Button>\n  )\n})\nNumberFieldIncrement.displayName = \"NumberFieldIncrement\"\n\nconst NumberFieldDecrement = React.forwardRef<\n  HTMLButtonElement,\n  NumberFieldStepperProps\n>(({ className, variant, size, asChild = false, step = 1, ...props }, ref) => {\n  const context = React.useContext(NumberFieldContext)\n\n  if (!context) {\n    throw new Error(\n      \"NumberFieldDecrement must be used within a NumberField component\"\n    )\n  }\n\n  return (\n    <Button\n      ref={ref}\n      className={cn(\n        \"border-r-0 border-b-0 w-full h-full text-muted-foreground hover:text-foreground p-0 rounded-none flex flex-col justify-center align-center\",\n        \"absolute bottom-0 right-0 h-1/2 w-6\",\n        className\n      )}\n      variant=\"outline\"\n      onClick={() => context.setDelta(-step)}\n      disabled={context ? context.disableNumberField || props.disabled : false}\n      {...props}\n    >\n      <ChevronDownIcon />\n    </Button>\n  )\n})\nNumberFieldDecrement.displayName = \"NumberFieldDecrement\"\n\nexport {\n  NumberField,\n  NumberFieldInput,\n  NumberFieldIncrement,\n  NumberFieldDecrement,\n}\n"
    }
  ],
  "type": "components:ui"
}