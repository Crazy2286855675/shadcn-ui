{
  "name": "stepper",
  "files": [
    {
      "name": "stepper.tsx",
      "content": "import * as React from \"react\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { Check, Loader2, X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { Button } from \"./button\"\nimport { Separator } from \"./separator\"\nimport { useMediaQuery } from \"./use-stepper\"\n\n/********** Context **********/\n\ninterface StepsContextValue extends StepsProps {\n  isClickable?: boolean\n  isError?: boolean\n  isLoading?: boolean\n  isVertical?: boolean\n  isLabelVertical?: boolean\n  stepCount?: number\n}\n\nconst StepsContext = React.createContext<StepsContextValue>({\n  activeStep: 0,\n})\n\nexport const useStepperContext = () => React.useContext(StepsContext)\n\nexport const StepsProvider: React.FC<{\n  value: StepsContextValue\n  children: React.ReactNode\n}> = ({ value, children }) => {\n  const isError = value.state === \"error\"\n  const isLoading = value.state === \"loading\"\n\n  const isVertical = value.orientation === \"vertical\"\n  const isLabelVertical =\n    value.orientation !== \"vertical\" && value.labelOrientation === \"vertical\"\n\n  return (\n    <StepsContext.Provider\n      value={{\n        ...value,\n        isError,\n        isLoading,\n        isVertical,\n        isLabelVertical,\n      }}\n    >\n      {children}\n    </StepsContext.Provider>\n  )\n}\n\n/********** Steps **********/\n\nexport interface StepsProps extends React.HTMLAttributes<HTMLDivElement> {\n  activeStep: number\n  orientation?: \"vertical\" | \"horizontal\"\n  state?: \"loading\" | \"error\"\n  responsive?: boolean\n  onClickStep?: (step: number) => void\n  successIcon?: React.ReactElement\n  errorIcon?: React.ReactElement\n  labelOrientation?: \"vertical\" | \"horizontal\"\n  children?: React.ReactNode\n  variant?: \"default\" | \"ghost\" | \"outline\" | \"secondary\"\n}\n\nexport const Steps = React.forwardRef<HTMLDivElement, StepsProps>(\n  (\n    {\n      activeStep = 0,\n      state,\n      responsive = true,\n      orientation: orientationProp = \"horizontal\",\n      onClickStep,\n      labelOrientation = \"horizontal\",\n      children,\n      errorIcon,\n      successIcon,\n      variant = \"default\",\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const childArr = React.Children.toArray(children)\n\n    const stepCount = childArr.length\n\n    const renderHorizontalContent = () => {\n      if (activeStep <= childArr.length) {\n        return React.Children.map(childArr[activeStep], (node) => {\n          if (!React.isValidElement(node)) return\n          return React.Children.map(\n            node.props.children,\n            (childNode) => childNode\n          )\n        })\n      }\n      return null\n    }\n\n    const isClickable = !!onClickStep\n\n    const isMobile = useMediaQuery(\"(max-width: 43em)\")\n\n    const orientation = isMobile && responsive ? \"vertical\" : orientationProp\n\n    return (\n      <StepsProvider\n        value={{\n          activeStep,\n          orientation,\n          state,\n          responsive,\n          onClickStep,\n          labelOrientation,\n          isClickable,\n          stepCount,\n          errorIcon,\n          successIcon,\n          variant,\n        }}\n      >\n        <div\n          {...props}\n          ref={ref}\n          className={cn(\n            \"flex w-full flex-1 justify-between gap-4 text-center\",\n            orientation === \"vertical\" ? \"flex-col\" : \"flex-row\",\n            className\n          )}\n        >\n          {React.Children.map(children, (child, i) => {\n            const isCompletedStep =\n              (React.isValidElement(child) && child.props.isCompletedStep) ??\n              i < activeStep\n            const isLastStep = i === stepCount - 1\n            const isCurrentStep = i === activeStep\n\n            const stepProps = {\n              index: i,\n              isCompletedStep,\n              isCurrentStep,\n              isLastStep,\n            }\n\n            if (React.isValidElement(child)) {\n              return React.cloneElement(child, stepProps)\n            }\n\n            return null\n          })}\n        </div>\n        {orientation === \"horizontal\" && renderHorizontalContent()}\n      </StepsProvider>\n    )\n  }\n)\n\nSteps.displayName = \"Steps\"\n\n/********** Step **********/\n\nconst stepVariants = cva(\"relative flex flex-row gap-2\", {\n  variants: {\n    isLastStep: {\n      true: \"flex-[0_0_auto] justify-end\",\n      false: \"flex-[1_0_auto] justify-start\",\n    },\n    isVertical: {\n      true: \"flex-col\",\n      false: \"items-center\",\n    },\n    isClickable: {\n      true: \"cursor-pointer\",\n    },\n  },\n  compoundVariants: [\n    {\n      isVertical: true,\n      isLastStep: true,\n      class: \"w-full flex-[1_0_auto] flex-col items-start justify-start\",\n    },\n  ],\n})\n\nexport interface StepConfig extends StepLabelProps {\n  icon?: React.ReactElement\n}\n\nexport interface StepProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n  VariantProps<typeof stepVariants>,\n  StepConfig {\n  isCompletedStep?: boolean\n}\n\ninterface StepStatus {\n  index: number\n  isCompletedStep?: boolean\n  isCurrentStep?: boolean\n}\n\ninterface StepAndStatusProps extends StepProps, StepStatus {\n  additionalClassName?: {\n    button?: string\n    label?: string\n    description?: string\n  }\n}\n\nexport const Step = React.forwardRef<HTMLDivElement, StepAndStatusProps>(\n  (props, ref) => {\n    const {\n      children,\n      description,\n      icon: CustomIcon,\n      index,\n      isCompletedStep,\n      isCurrentStep,\n      isLastStep,\n      label,\n      optional,\n      optionalLabel,\n      className,\n      additionalClassName,\n      ...rest\n    } = props\n\n    const {\n      isVertical,\n      isError,\n      isLoading,\n      successIcon: CustomSuccessIcon,\n      errorIcon: CustomErrorIcon,\n      isLabelVertical,\n      onClickStep,\n      isClickable,\n      variant,\n    } = useStepperContext()\n\n    const hasVisited = isCurrentStep || isCompletedStep\n\n    const handleClick = (index: number) => {\n      if (isClickable && onClickStep) {\n        onClickStep(index)\n      }\n    }\n\n    const Icon = React.useMemo(() => CustomIcon ?? null, [CustomIcon])\n\n    const Success = React.useMemo(\n      () => CustomSuccessIcon ?? <Check />,\n      [CustomSuccessIcon]\n    )\n\n    const Error = React.useMemo(\n      () => CustomErrorIcon ?? <X />,\n      [CustomErrorIcon]\n    )\n\n    const RenderIcon = React.useMemo(() => {\n      if (isCompletedStep) return Success\n      if (isCurrentStep) {\n        if (isError) return Error\n        if (isLoading) return <Loader2 className=\"animate-spin\" />\n      }\n      if (Icon) return Icon\n      return (index || 0) + 1\n    }, [\n      isCompletedStep,\n      Success,\n      isCurrentStep,\n      Icon,\n      index,\n      isError,\n      Error,\n      isLoading,\n    ])\n\n    return (\n      <div\n        {...rest}\n        className={cn(\n          stepVariants({\n            isLastStep,\n            isVertical,\n            isClickable: isClickable && !!onClickStep,\n          }),\n          className\n        )}\n        ref={ref}\n        onClick={() => handleClick(index)}\n        aria-disabled={!hasVisited}\n      >\n        <div\n          className={cn(\n            \"flex items-center gap-2\",\n            isLabelVertical ? \"flex-col\" : \"\"\n          )}\n        >\n          <Button\n            aria-current={isCurrentStep ? \"step\" : undefined}\n            data-invalid={isCurrentStep && isError}\n            data-highlighted={isCompletedStep}\n            data-clickable={isClickable}\n            disabled={!(hasVisited || isClickable)}\n            className={cn(\n              \"aspect-square h-10 w-10 rounded-full data-[highlighted=true]:bg-green-700 data-[highlighted=true]:text-white\",\n              isCompletedStep || typeof RenderIcon !== \"number\"\n                ? \"px-3 py-2\"\n                : \"\",\n              additionalClassName?.button\n            )}\n            variant={isCurrentStep && isError ? \"destructive\" : variant}\n          >\n            {RenderIcon}\n          </Button>\n          <StepLabel\n            label={label}\n            description={description}\n            optional={optional}\n            optionalLabel={optionalLabel}\n            labelClassName={additionalClassName?.label}\n            descriptionClassName={additionalClassName?.description}\n            {...{ isCurrentStep }}\n          />\n        </div>\n        <Connector\n          index={index}\n          isLastStep={isLastStep}\n          hasLabel={!!label || !!description}\n          isCompletedStep={isCompletedStep || false}\n        >\n          {(isCurrentStep || isCompletedStep) && children}\n        </Connector>\n      </div>\n    )\n  }\n)\n\nStep.displayName = \"Step\"\n\n/********** StepLabel **********/\n\ninterface StepLabelProps {\n  label: string | React.ReactNode\n  description?: string | React.ReactNode\n  optional?: boolean\n  optionalLabel?: string | React.ReactNode\n  labelClassName?: string\n  descriptionClassName?: string\n}\n\nconst StepLabel = ({\n  isCurrentStep,\n  label,\n  description,\n  optional,\n  optionalLabel,\n  labelClassName,\n  descriptionClassName,\n}: StepLabelProps & {\n  isCurrentStep?: boolean\n}) => {\n  const { isLabelVertical } = useStepperContext()\n\n  const shouldRender = !!label || !!description\n\n  const renderOptionalLabel = !!optional && !!optionalLabel\n\n  return shouldRender ? (\n    <div\n      aria-current={isCurrentStep ? \"step\" : undefined}\n      className={cn(\n        \"flex w-max flex-col justify-center\",\n        isLabelVertical ? \"items-center text-center\" : \"items-start text-left\"\n      )}\n    >\n      {!!label && (\n        <p className={labelClassName}>\n          {label}\n          {renderOptionalLabel && (\n            <span className=\"ml-1 text-xs text-muted-foreground\">\n              ({optionalLabel})\n            </span>\n          )}\n        </p>\n      )}\n      {!!description && (\n        <p className={cn(\"text-sm text-muted-foreground\", descriptionClassName)}>{description}</p>\n      )}\n    </div>\n  ) : null\n}\n\nStepLabel.displayName = \"StepLabel\"\n\n/********** Connector **********/\n\ninterface ConnectorProps extends React.HTMLAttributes<HTMLDivElement> {\n  isCompletedStep: boolean\n  isLastStep?: boolean | null\n  hasLabel?: boolean\n  index: number\n}\n\nconst Connector = React.memo(\n  ({ isCompletedStep, children, isLastStep }: ConnectorProps) => {\n    const { isVertical } = useStepperContext()\n\n    if (isVertical) {\n      return (\n        <div\n          data-highlighted={isCompletedStep}\n          className={cn(\n            \"ms-5 mt-1 flex h-auto min-h-[2rem] flex-1 self-stretch border-l-2 ps-8\",\n            isLastStep ? \"min-h-0 border-transparent\" : \"\",\n            isCompletedStep ? \"border-green-700\" : \"\"\n          )}\n        >\n          {!isCompletedStep && (\n            <div className=\"my-4 block h-auto w-full\">{children}</div>\n          )}\n        </div>\n      )\n    }\n\n    if (isLastStep) {\n      return null\n    }\n\n    return (\n      <Separator\n        data-highlighted={isCompletedStep}\n        className=\"flex h-[2px] min-h-[auto] flex-1 self-auto data-[highlighted=true]:bg-green-700\"\n        orientation={isVertical ? \"vertical\" : \"horizontal\"}\n      />\n    )\n  }\n)\n\nConnector.displayName = \"Connector\"\n"
    },
    {
      "name": "use-stepper.ts",
      "content": "import * as React from \"react\"\n\nimport { StepProps } from \"./stepper\"\n\ntype useStepper = {\n  initialStep: number\n  steps: Pick<\n    StepProps,\n    \"label\" | \"description\" | \"optional\" | \"optionalLabel\" | \"icon\"\n  >[]\n}\n\ntype useStepperReturn = {\n  nextStep: () => void\n  prevStep: () => void\n  resetSteps: () => void\n  setStep: (step: number) => void\n  activeStep: number\n  isDisabledStep: boolean\n  isLastStep: boolean\n  isOptionalStep: boolean | undefined\n}\n\nexport function useStepper({\n  initialStep,\n  steps,\n}: useStepper): useStepperReturn {\n  const [activeStep, setActiveStep] = React.useState(initialStep)\n\n  const nextStep = () => {\n    setActiveStep((prev) => prev + 1)\n  }\n\n  const prevStep = () => {\n    setActiveStep((prev) => prev - 1)\n  }\n\n  const resetSteps = () => {\n    setActiveStep(initialStep)\n  }\n\n  const setStep = (step: number) => {\n    setActiveStep(step)\n  }\n\n  const isDisabledStep = activeStep === 0\n\n  const isLastStep = activeStep === steps.length - 1\n\n  const isOptionalStep = steps[activeStep]?.optional\n\n  return {\n    nextStep,\n    prevStep,\n    resetSteps,\n    setStep,\n    activeStep,\n    isDisabledStep,\n    isLastStep,\n    isOptionalStep,\n  }\n}\n\ninterface UseMediaQueryOptions {\n  getInitialValueInEffect: boolean\n}\n\ntype MediaQueryCallback = (event: { matches: boolean; media: string }) => void\n\n/**\n * Older versions of Safari (shipped withCatalina and before) do not support addEventListener on matchMedia\n * https://stackoverflow.com/questions/56466261/matchmedia-addlistener-marked-as-deprecated-addeventlistener-equivalent\n * */\nfunction attachMediaListener(\n  query: MediaQueryList,\n  callback: MediaQueryCallback\n) {\n  try {\n    query.addEventListener(\"change\", callback)\n    return () => query.removeEventListener(\"change\", callback)\n  } catch (e) {\n    query.addListener(callback)\n    return () => query.removeListener(callback)\n  }\n}\n\nfunction getInitialValue(query: string, initialValue?: boolean) {\n  if (typeof initialValue === \"boolean\") {\n    return initialValue\n  }\n\n  if (typeof window !== \"undefined\" && \"matchMedia\" in window) {\n    return window.matchMedia(query).matches\n  }\n\n  return false\n}\n\nexport function useMediaQuery(\n  query: string,\n  initialValue?: boolean,\n  { getInitialValueInEffect }: UseMediaQueryOptions = {\n    getInitialValueInEffect: true,\n  }\n) {\n  const [matches, setMatches] = React.useState(\n    getInitialValueInEffect ? false : getInitialValue(query, initialValue)\n  )\n  const queryRef = React.useRef<MediaQueryList>()\n\n  React.useEffect(() => {\n    if (\"matchMedia\" in window) {\n      queryRef.current = window.matchMedia(query)\n      setMatches(queryRef.current.matches)\n      return attachMediaListener(queryRef.current, (event) =>\n        setMatches(event.matches)\n      )\n    }\n\n    return undefined\n  }, [query])\n\n  return matches\n}\n"
    }
  ],
  "type": "components:ui"
}