{
  "name": "date-range-picker",
  "dependencies": [
    "react-day-picker",
    "date-fns"
  ],
  "registryDependencies": [
    "button",
    "calendar",
    "popover",
    "select"
  ],
  "files": [
    {
      "name": "date-range-picker.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { CalendarIcon } from \"@radix-ui/react-icons\"\r\nimport { addDays, format } from \"date-fns\"\r\nimport { DateRange } from \"react-day-picker\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Button } from \"@/registry/default/ui/button\"\r\nimport { Calendar } from \"@/registry/default/ui/calendar\"\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@/registry/default/ui/popover\"\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/registry/default/ui/select\"\r\n\r\ninterface DateRangePickerProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  showExternalPresets?: boolean\r\n  showInternalPresets?: boolean\r\n  numberOfMonths?: 2 | 3 | 4 | 5 | 6\r\n}\r\n\r\nexport function DateRangePicker({\r\n  showExternalPresets,\r\n  showInternalPresets,\r\n  numberOfMonths = 2,\r\n  className,\r\n}: DateRangePickerProps) {\r\n  const [date, setDate] = React.useState<DateRange | undefined>({\r\n    from: new Date(2023, 0, 20),\r\n    to: addDays(new Date(2023, 0, 20), 20),\r\n  })\r\n\r\n  const handlePresetSelect = (value: string) => {\r\n    switch (value) {\r\n      case \"last7Days\":\r\n        setDate({\r\n          from: addDays(new Date(), -7),\r\n          to: new Date(),\r\n        })\r\n        break\r\n      case \"last30Days\":\r\n        setDate({\r\n          from: addDays(new Date(), -30),\r\n          to: new Date(),\r\n        })\r\n        break\r\n      case \"monthToDate\":\r\n        setDate({\r\n          from: new Date(new Date().getFullYear(), new Date().getMonth(), 1),\r\n          to: new Date(),\r\n        })\r\n        break\r\n      case \"yearToDate\":\r\n        setDate({\r\n          from: new Date(new Date().getFullYear(), 0, 1),\r\n          to: new Date(),\r\n        })\r\n        break\r\n      case \"thisYear\":\r\n        setDate({\r\n          from: new Date(new Date().getFullYear(), 0, 1),\r\n          to: new Date(new Date().getFullYear(), 11, 31),\r\n        })\r\n        break\r\n      case \"lastYear\":\r\n        setDate({\r\n          from: new Date(new Date().getFullYear() - 1, 0, 1),\r\n          to: new Date(new Date().getFullYear() - 1, 11, 31),\r\n        })\r\n        break\r\n      default:\r\n        break\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={cn(\"inline-flex\", className)}>\r\n      <Popover>\r\n        <PopoverTrigger asChild>\r\n          <Button\r\n            id=\"date\"\r\n            variant={\"outline\"}\r\n            className={cn(\r\n              \"w-[260px] justify-start text-left font-normal\",\r\n              !date && \"text-muted-foreground\"\r\n            )}\r\n          >\r\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\r\n            {date?.from ? (\r\n              date.to ? (\r\n                <>\r\n                  {format(date.from, \"LLL dd, y\")} -{\" \"}\r\n                  {format(date.to, \"LLL dd, y\")}\r\n                </>\r\n              ) : (\r\n                format(date.from, \"LLL dd, y\")\r\n              )\r\n            ) : (\r\n              <span>Pick a date</span>\r\n            )}\r\n          </Button>\r\n        </PopoverTrigger>\r\n        <PopoverContent className=\"w-auto p-0\" align=\"end\">\r\n          {showInternalPresets ? (\r\n            <>\r\n              <div className=\"flex\">\r\n                <div className=\"justify-evenly p-2\">\r\n                  <div\r\n                    className=\"text-muted-foreground\"\r\n                    onClick={() => handlePresetSelect(\"last7Days\")}\r\n                  >\r\n                    <span className=\"font-bold underline\">Presets</span>\r\n                  </div>\r\n                  <div\r\n                    role=\"button\"\r\n                    className=\"text-sm text-muted-foreground hover:text-primary\"\r\n                    onClick={() => handlePresetSelect(\"last7Days\")}\r\n                  >\r\n                    Last 7 Days\r\n                  </div>\r\n                  <div\r\n                    role=\"button\"\r\n                    className=\"text-sm text-muted-foreground hover:text-primary\"\r\n                    onClick={() => handlePresetSelect(\"last30Days\")}\r\n                  >\r\n                    Last 30 Days\r\n                  </div>\r\n                  <div\r\n                    role=\"button\"\r\n                    className=\"text-sm text-muted-foreground hover:text-primary\"\r\n                    onClick={() => handlePresetSelect(\"monthToDate\")}\r\n                  >\r\n                    Month to Date\r\n                  </div>\r\n                  <div\r\n                    role=\"button\"\r\n                    className=\"text-sm text-muted-foreground hover:text-primary\"\r\n                    onClick={() => handlePresetSelect(\"yearToDate\")}\r\n                  >\r\n                    Year to Date\r\n                  </div>\r\n                  <div\r\n                    role=\"button\"\r\n                    className=\"text-sm text-muted-foreground hover:text-primary\"\r\n                    onClick={() => handlePresetSelect(\"thisYear\")}\r\n                  >\r\n                    This Year\r\n                  </div>\r\n                  <div\r\n                    role=\"button\"\r\n                    className=\"text-sm text-muted-foreground hover:text-primary\"\r\n                    onClick={() => handlePresetSelect(\"lastYear\")}\r\n                  >\r\n                    Last Year\r\n                  </div>\r\n                </div>\r\n                <Calendar\r\n                  initialFocus\r\n                  mode=\"range\"\r\n                  defaultMonth={date?.from}\r\n                  selected={date}\r\n                  onSelect={setDate}\r\n                  numberOfMonths={numberOfMonths}\r\n                />\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <Calendar\r\n              initialFocus\r\n              mode=\"range\"\r\n              defaultMonth={date?.from}\r\n              selected={date}\r\n              onSelect={setDate}\r\n              numberOfMonths={numberOfMonths}\r\n            />\r\n          )}\r\n        </PopoverContent>\r\n      </Popover>\r\n      {showExternalPresets && (\r\n        <Select\r\n          onValueChange={(value) => {\r\n            setDate(undefined) // Reset range when a preset is selected\r\n            handlePresetSelect(value)\r\n          }}\r\n        >\r\n          <SelectTrigger className=\"w-[140px] rounded-l-none\">\r\n            <SelectValue placeholder=\"Select Range\" />\r\n          </SelectTrigger>\r\n          <SelectContent position=\"popper\">\r\n            <SelectItem value=\"last7Days\">Last 7 Days</SelectItem>\r\n            <SelectItem value=\"last30Days\">Last 30 Days</SelectItem>\r\n            <SelectItem value=\"monthToDate\">Month to Date</SelectItem>\r\n            <SelectItem value=\"yearToDate\">Year to Date</SelectItem>\r\n            <SelectItem value=\"thisYear\">This Year</SelectItem>\r\n            <SelectItem value=\"lastYear\">Last Year</SelectItem>\r\n          </SelectContent>\r\n        </Select>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n"
    }
  ],
  "type": "components:ui"
}