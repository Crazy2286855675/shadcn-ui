{
  "name": "stepper",
  "files": [
    {
      "name": "stepper.tsx",
      "content": "import React from \"react\"\nimport { cva } from \"class-variance-authority\"\nimport { Check, Loader2, X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nimport { Button } from \"./button\"\nimport { Separator } from \"./separator\"\n\ninterface StepperProps {\n  steps: {\n    label: string | React.ReactNode\n    description?: string | React.ReactNode\n    icon?: React.ReactNode\n    optional?: boolean\n  }[]\n  initialStep: number\n  orientation?: \"vertical\" | \"horizontal\"\n  labelOrientation?: \"vertical\" | \"horizontal\"\n  scrollTracking?: boolean\n  variant?: \"default\" | \"ghost\" | \"outline\" | \"secondary\"\n  status?: \"default\" | \"success\" | \"error\" | \"loading\"\n  isClickable?: boolean\n}\n\ninterface ContextStepperProps extends StepperProps {\n  nextStep: () => void\n  prevStep: () => void\n  resetSteps: () => void\n  setStep: (step: number) => void\n  activeStep: number\n}\n\nconst StepperContext = React.createContext<ContextStepperProps>({\n  steps: [],\n  initialStep: 0,\n  nextStep: () => {},\n  prevStep: () => {},\n  resetSteps: () => {},\n  setStep: () => {},\n  activeStep: 0,\n})\n\nconst StepperProvider = ({\n  value,\n  children,\n}: {\n  value: StepperProps\n  children: React.ReactNode\n}) => {\n  const [activeStep, setActiveStep] = React.useState(value.initialStep)\n  const nextStep = () => {\n    setActiveStep((prev) => prev + 1)\n  }\n\n  const prevStep = () => {\n    setActiveStep((prev) => prev - 1)\n  }\n\n  const resetSteps = () => {\n    setActiveStep(value.initialStep)\n  }\n\n  const setStep = (step: number) => {\n    setActiveStep(step)\n  }\n\n  return (\n    <StepperContext.Provider\n      value={{\n        ...value,\n        nextStep,\n        prevStep,\n        resetSteps,\n        setStep,\n        activeStep,\n      }}\n    >\n      {children}\n    </StepperContext.Provider>\n  )\n}\n\nexport function useStepper() {\n  const context = React.useContext(StepperContext)\n\n  if (context === undefined) {\n    throw new Error(\"useStepper must be used within a StepperProvider\")\n  }\n\n  const isDisabledStep = context.activeStep === 0\n  const isLastStep = context.activeStep === context.steps.length - 1\n  const isOptionalStep = context.steps[context.activeStep]?.optional\n  const isFinished = context.activeStep === context.steps.length\n\n  return {\n    ...context,\n    isDisabledStep,\n    isLastStep,\n    isOptionalStep,\n    isFinished,\n  }\n}\n\nexport const Stepper = React.forwardRef<\n  HTMLDivElement,\n  StepperProps & React.HTMLAttributes<HTMLDivElement>\n>(\n  (\n    {\n      initialStep,\n      steps,\n      status = \"default\",\n      orientation = \"horizontal\",\n      labelOrientation = \"horizontal\",\n      scrollTracking = false,\n      children,\n      variant = \"default\",\n      isClickable = true,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const footer = [] as React.ReactElement[]\n\n    const items = React.Children.toArray(children).map((child, index) => {\n      if (!React.isValidElement(child)) {\n        throw new Error(\"Stepper children must be valid React elements.\")\n      }\n      if (child.type !== StepperItem && child.type !== StepperFooter) {\n        throw new Error(\n          \"Stepper children must be either <StepperItem> or <StepperFooter>.\"\n        )\n      }\n      if (child.type === StepperFooter) {\n        footer.push(child)\n        return null\n      }\n      const stepperItemProps = {\n        ...child.props,\n        step: index,\n      }\n\n      return React.cloneElement(child, stepperItemProps)\n    })\n\n    return (\n      <StepperProvider\n        value={{\n          steps,\n          initialStep,\n          orientation,\n          labelOrientation,\n          scrollTracking,\n          variant,\n          isClickable,\n          status,\n        }}\n      >\n        <div ref={ref} className={cn(\"space-y-4\", className)} {...props}>\n          <div\n            className={cn(\n              \"flex w-full flex-1 justify-between gap-2 text-center\",\n              orientation === \"vertical\" ? \"flex-col\" : \"flex-row\"\n            )}\n          >\n            {items}\n          </div>\n          {orientation === \"horizontal\" && (\n            <HorizontalContent>{children}</HorizontalContent>\n          )}\n          {footer}\n        </div>\n      </StepperProvider>\n    )\n  }\n)\n\nconst HorizontalContent = ({ children }: { children?: React.ReactNode }) => {\n  const { activeStep, isFinished } = useStepper()\n\n  if (isFinished) {\n    return null\n  }\n\n  const activeStepperItem = React.Children.toArray(children)[\n    activeStep\n  ] as React.ReactElement\n\n  const content = activeStepperItem?.props?.children\n\n  return content\n}\n\nconst stepperItemVariants = cva(\"relative flex flex-row gap-2\", {\n  variants: {\n    isLastStep: {\n      true: \"flex-[0_0_auto] justify-end\",\n      false: \"flex-[1_0_auto] justify-start\",\n    },\n    isVertical: {\n      true: \"flex-col\",\n      false: \"items-center\",\n    },\n  },\n  compoundVariants: [\n    {\n      isVertical: true,\n      isLastStep: true,\n      class: \"w-full flex-[1_0_auto] flex-col items-start justify-start\",\n    },\n  ],\n})\n\nconst icons = {\n  success: <Check className=\"h-6 w-6\" />,\n  error: <X className=\"h-6 w-6\" />,\n  loading: <Loader2 className=\"h-6 w-6 animate-spin\" />,\n  default: null,\n} as const\n\nexport const StepperItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & {\n    onStepperItemClick?: (\n      e: React.MouseEvent<HTMLButtonElement, MouseEvent>\n    ) => void\n  }\n  // @ts-ignore - step is a prop that is added from the Stepper through React.Children.\n>(({ step, children, className, onStepperItemClick, ...props }, ref) => {\n  const {\n    activeStep,\n    setStep,\n    steps,\n    orientation,\n    labelOrientation,\n    scrollTracking,\n    variant,\n    status,\n    isClickable,\n  } = useStepper()\n\n  const isActive = step === activeStep\n  const isCompleted = step < activeStep\n  const isDisabled = step > activeStep && !isClickable\n\n  const isLastStep = step === steps.length - 1\n\n  const isVertical = orientation === \"vertical\"\n  const isVerticalLabel = labelOrientation === \"vertical\"\n\n  const isError = isActive && status === \"error\"\n\n  let icon = steps[step].icon || step + 1\n  if (status !== \"default\" && isActive) {\n    icon = icons[status!]\n  }\n  if (isCompleted) {\n    icon = icons.success\n  }\n\n  const content = React.Children.toArray(children).filter(\n    (child) => React.isValidElement(child) && child.type !== StepperFooter\n  )\n\n  const footer = React.Children.toArray(children).filter(\n    (child) => React.isValidElement(child) && child.type === StepperFooter\n  )[0] as React.ReactElement\n\n  const onClickItem = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (isDisabled) {\n      return\n    }\n    if (onStepperItemClick) {\n      return onStepperItemClick(e)\n    }\n    setStep(step)\n  }\n\n  return (\n    <div\n      className={cn(\n        \"stepper-item\",\n        stepperItemVariants({\n          isLastStep,\n          isVertical,\n        }),\n        className\n      )}\n      ref={ref}\n      {...props}\n    >\n      <div\n        className={cn(\n          \"flex items-center gap-3\",\n          isVerticalLabel && !isVertical && \"flex-col gap-2\"\n        )}\n        ref={(node) => {\n          if (scrollTracking) {\n            node?.scrollIntoView({\n              behavior: \"smooth\",\n              block: \"center\",\n            })\n          }\n        }}\n      >\n        <Button\n          disabled={isDisabled}\n          onClick={onClickItem}\n          className={cn(\n            \"stepper-item-button aspect-square h-12 w-12 rounded-full p-2.5\",\n            isClickable && \"cursor-pointer\",\n            !isActive && !isDisabled && !isCompleted && \"opacity-50\",\n            isCompleted && \"bg-green-700 text-white\"\n          )}\n          variant={isError ? \"destructive\" : variant}\n        >\n          {icon}\n        </Button>\n        <div\n          className={cn(\n            \"w-max text-start\",\n            isVerticalLabel && !isVertical && \"text-center\"\n          )}\n        >\n          <p className=\"text-sm text-slate-900 dark:text-slate-100\">\n            {steps[step].label}\n          </p>\n          {steps[step].description && (\n            <p className=\"text-xs text-slate-500 dark:text-slate-400\">\n              {steps[step].description}\n            </p>\n          )}\n        </div>\n      </div>\n      <div className=\"flex w-full gap-8\">\n        {!isLastStep && (\n          <Separator\n            className={cn(\n              \"stepper-item-separator\",\n              isVertical\n                ? \"ms-6 flex h-auto min-h-[2rem] w-[1px] border-l-2\"\n                : \"h-[2px] flex-1\",\n              isCompleted && \"bg-green-700\"\n            )}\n            orientation={orientation}\n          />\n        )}\n        {isVertical && isActive && (\n          <div className=\"w-full space-y-4\">\n            {content}\n            {footer}\n          </div>\n        )}\n      </div>\n    </div>\n  )\n})\n\nStepperItem.displayName = \"StepperItem\"\n\nexport const StepperFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ children, ...props }, ref) => {\n  return (\n    <div ref={ref} {...props}>\n      {children}\n    </div>\n  )\n})\n\nStepperFooter.displayName = \"StepperFooter\"\n"
    },
    {
      "name": "use-stepper.ts",
      "content": "import * as React from \"react\"\n\nimport { StepperItemProps } from \"./stepper\"\n\ntype useStepper = {\n  initialStep: number\n  steps: Pick<\n    StepperItemProps,\n    \"label\" | \"description\" | \"optional\" | \"optionalLabel\" | \"icon\"\n  >[]\n}\n\ntype useStepperReturn = {\n  nextStep: () => void\n  prevStep: () => void\n  resetSteps: () => void\n  setStep: (step: number) => void\n  activeStep: number\n  isDisabledStep: boolean\n  isLastStep: boolean\n  isOptionalStep: boolean | undefined\n}\n\nexport function useStepper({\n  initialStep,\n  steps,\n}: useStepper): useStepperReturn {\n  const [activeStep, setActiveStep] = React.useState(initialStep)\n\n  const nextStep = () => {\n    setActiveStep((prev) => prev + 1)\n  }\n\n  const prevStep = () => {\n    setActiveStep((prev) => prev - 1)\n  }\n\n  const resetSteps = () => {\n    setActiveStep(initialStep)\n  }\n\n  const setStep = (step: number) => {\n    setActiveStep(step)\n  }\n\n  const isDisabledStep = activeStep === 0\n\n  const isLastStep = activeStep === steps.length - 1\n\n  const isOptionalStep = steps[activeStep]?.optional\n\n  return {\n    nextStep,\n    prevStep,\n    resetSteps,\n    setStep,\n    activeStep,\n    isDisabledStep,\n    isLastStep,\n    isOptionalStep,\n  }\n}\n\ninterface UseMediaQueryOptions {\n  getInitialValueInEffect: boolean\n}\n\ntype MediaQueryCallback = (event: { matches: boolean; media: string }) => void\n\n/**\n * Older versions of Safari (shipped withCatalina and before) do not support addEventListener on matchMedia\n * https://stackoverflow.com/questions/56466261/matchmedia-addlistener-marked-as-deprecated-addeventlistener-equivalent\n * */\nfunction attachMediaListener(\n  query: MediaQueryList,\n  callback: MediaQueryCallback\n) {\n  try {\n    query.addEventListener(\"change\", callback)\n    return () => query.removeEventListener(\"change\", callback)\n  } catch (e) {\n    query.addListener(callback)\n    return () => query.removeListener(callback)\n  }\n}\n\nfunction getInitialValue(query: string, initialValue?: boolean) {\n  if (typeof initialValue === \"boolean\") {\n    return initialValue\n  }\n\n  if (typeof window !== \"undefined\" && \"matchMedia\" in window) {\n    return window.matchMedia(query).matches\n  }\n\n  return false\n}\n\nexport function useMediaQuery(\n  query: string,\n  initialValue?: boolean,\n  { getInitialValueInEffect }: UseMediaQueryOptions = {\n    getInitialValueInEffect: true,\n  }\n) {\n  const [matches, setMatches] = React.useState(\n    getInitialValueInEffect ? false : getInitialValue(query, initialValue)\n  )\n  const queryRef = React.useRef<MediaQueryList>()\n\n  React.useEffect(() => {\n    if (\"matchMedia\" in window) {\n      queryRef.current = window.matchMedia(query)\n      setMatches(queryRef.current.matches)\n      return attachMediaListener(queryRef.current, (event) =>\n        setMatches(event.matches)\n      )\n    }\n\n    return undefined\n  }, [query])\n\n  return matches\n}\n"
    }
  ],
  "type": "components:ui"
}