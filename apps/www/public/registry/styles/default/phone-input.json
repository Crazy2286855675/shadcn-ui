{
  "name": "phone-input",
  "dependencies": [
    "react-phone-number-input"
  ],
  "registryDependencies": [
    "button",
    "command",
    "input",
    "popover"
  ],
  "files": [
    {
      "name": "phone-input.tsx",
      "content": "import * as React from \"react\"\nimport { Check, ChevronsUpDown } from \"lucide-react\"\nimport * as RPNInput from \"react-phone-number-input\"\nimport flags from \"react-phone-number-input/flags\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/registry/default/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/registry/default/ui/command\"\nimport { Input, InputProps } from \"@/registry/default/ui/input\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/registry/default/ui/popover\"\n\nexport type PhoneInputValue = RPNInput.Value\n\ntype PhoneInputProps = Omit<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  \"onChange\"\n> &\n  RPNInput.Props<typeof RPNInput.default>\n\nconst PhoneInput: React.ForwardRefExoticComponent<PhoneInputProps> = React.forwardRef<\n  React.ElementRef<typeof RPNInput.default>,\n  PhoneInputProps\n>(({ className, onChange, ...props }, ref) => (\n  <RPNInput.default\n    ref={ref}\n    placeholder={\"Enter a phone number\"}\n    className={cn(\"flex\", className)}\n    flagComponent={FlagComponent}\n    countrySelectComponent={CountrySelect}\n    inputComponent={InputComponent}\n    /**\n     * Handles the onChange event.\n     *\n     * react-phone-number-input might trigger the onChange event as undefined\n     * when a valid phone number is not entered. To prevent this,\n     * the value is coerced to an empty string.\n     *\n     * @param {E164Number | undefined} value - The entered value\n     */\n    onChange={(value) => onChange(value || \"\")}\n    {...props}\n  />\n));\nPhoneInput.displayName = \"PhoneInput\"\n\nconst InputComponent = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, ...props }, ref) => (\n    <Input\n      className={cn(\"rounded-s-none rounded-e-lg\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n)\n\ntype CountrySelectOption = { label: string; value: RPNInput.Country }\n\ntype CountrySelectProps = {\n  disabled?: boolean\n  value: RPNInput.Country\n  onChange: (value: RPNInput.Country) => void\n  options: CountrySelectOption[]\n}\n\nconst CountrySelect = ({\n  disabled,\n  value,\n  onChange,\n  options,\n}: CountrySelectProps) => {\n  const handleSelect = React.useCallback(\n    (country: RPNInput.Country) => {\n      onChange(country)\n    },\n    [onChange]\n  )\n\n  return (\n    <Popover>\n      <PopoverTrigger asChild>\n        <Button\n          type=\"button\"\n          variant={\"outline\"}\n          className={cn(\"rounded-e-none rounded-s-lg pl-3 pr-1 flex gap-1\")}\n          disabled={disabled}\n        >\n          <FlagComponent country={value} countryName={value} />\n          <ChevronsUpDown\n            className={cn(\n              \"opacity-50 h-4 w-4\",\n              disabled ? \"hidden\" : \"opacity-100\"\n            )}\n          />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[300px] p-0\">\n        <Command>\n          <CommandList>\n            <CommandInput placeholder=\"Search country...\" />\n            <CommandEmpty>No country found.</CommandEmpty>\n            <CommandGroup>\n              {options.map((option) => (\n                <CommandItem\n                  className={\"text-sm gap-2\"}\n                  key={option.value}\n                  onSelect={() => handleSelect(option.value)}\n                >\n                  <FlagComponent\n                    country={option.value}\n                    countryName={option.label}\n                  />\n                  <span>{option.label}</span>\n                  {option.value && (\n                    <span className=\"text-foreground/50\">\n                      {`+${RPNInput.getCountryCallingCode(option.value)}`}\n                    </span>\n                  )}\n                  <Check\n                    className={cn(\n                      \"ml-auto h-4 w-4\",\n                      option.value === value ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\nconst FlagComponent = ({ country, countryName }: RPNInput.FlagProps) => {\n  const Flag = flags[country]\n\n  return (\n    <span\n      className={\"overflow-hidden bg-foreground/20 rounded-sm flex w-6 h-4\"}\n    >\n      {Flag && <Flag title={countryName} />}\n    </span>\n  )\n}\n\nexport { PhoneInput }\n"
    }
  ],
  "type": "components:ui"
}