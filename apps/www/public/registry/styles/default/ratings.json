{
  "name": "ratings",
  "dependencies": [],
  "files": [
    {
      "name": "ratings.tsx",
      "content": "\"use client\"\n\nimport React from \"react\"\nimport { Star } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ratingVariants = {\n  default: {\n    star: \"text-foreground\",\n    emptyStar: \"text-muted-foreground\",\n  },\n  destructive: {\n    star: \"text-destructive\",\n    emptyStar: \"text-destructive/70\",\n  },\n  yellow: {\n    star: \"text-yellow-500\",\n    emptyStar: \"text-yellow-200\",\n  },\n}\n\ninterface RatingsProps extends React.HTMLAttributes<HTMLDivElement> {\n  totalStars?: number\n  size?: number\n  fill?: boolean\n  Icon?: React.ReactElement\n  variant?: keyof typeof ratingVariants\n  asInput?: boolean\n  value: number\n  onValueChange?: (value: number) => void\n}\n\nconst Ratings = ({ ...props }: RatingsProps) => {\n  const {\n    totalStars = 5,\n    size = 20,\n    fill = true,\n    Icon = <Star />,\n    variant = \"default\",\n    asInput = false,\n    onValueChange,\n    value,\n  } = props\n\n  const ratings = value\n\n  const fullStars = Math.floor(ratings)\n  const partialStar =\n    ratings % 1 > 0 ? (\n      <PartialStar\n        fillPercentage={ratings % 1}\n        size={size}\n        className={cn(ratingVariants[variant].star)}\n        Icon={Icon}\n        asInput={asInput}\n        onValueChange={() => onValueChange && onValueChange(fullStars + 1)}\n      />\n    ) : null\n\n  return (\n    <div className={cn(\"flex items-center gap-2\")} {...props}>\n      {[...Array(fullStars)].map((_, i) =>\n        React.cloneElement(Icon, {\n          key: i,\n          size,\n          className: cn(\n            fill ? \"fill-current\" : \"fill-transparent\",\n            ratingVariants[variant].star,\n            asInput ? \"cursor-pointer\" : \"\"\n          ),\n          role: props.asInput && \"input\",\n          onClick: () => onValueChange && onValueChange(i + 1),\n        })\n      )}\n      {partialStar}\n      {[...Array(totalStars - fullStars - (partialStar ? 1 : 0))].map((_, i) =>\n        React.cloneElement(Icon, {\n          key: i + fullStars + 1,\n          size,\n          className: cn(\n            ratingVariants[variant].emptyStar,\n            asInput ? \"cursor-pointer\" : \"\"\n          ),\n          role: props.asInput && \"input\",\n          onClick: () =>\n            onValueChange &&\n            onValueChange(fullStars + i + 1 + (partialStar ? 1 : 0)),\n        })\n      )}\n    </div>\n  )\n}\n\ninterface PartialStarProps {\n  fillPercentage: number\n  size: number\n  className?: string\n  Icon: React.ReactElement\n  asInput?: boolean\n  onValueChange?: () => void\n}\n\nconst PartialStar = ({ ...props }: PartialStarProps) => {\n  const { fillPercentage, size, className, Icon, asInput, onValueChange } =\n    props\n\n  return (\n    <div\n      role={asInput ? \"input\" : undefined}\n      onClick={() => onValueChange && onValueChange()}\n      className={cn(\"relative inline-block\", asInput && \"cursor-pointer\")}\n    >\n      {React.cloneElement(Icon, {\n        size,\n        className: cn(\"fill-transparent\", className),\n      })}\n      <div\n        style={{\n          position: \"absolute\",\n          top: 0,\n          overflow: \"hidden\",\n          width: `${fillPercentage * 100}%`,\n        }}\n      >\n        {React.cloneElement(Icon, {\n          size,\n          className: cn(\"fill-current\", className),\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default Ratings\n"
    }
  ],
  "type": "components:ui"
}