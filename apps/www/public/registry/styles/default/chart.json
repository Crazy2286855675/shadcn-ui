{
  "name": "chart",
  "dependencies": [
    "recharts"
  ],
  "files": [
    {
      "name": "chart.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: { light: string; dark: string } }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"aspect-video w-full text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line-line]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  if (!config) {\n    return null\n  }\n\n  return (\n    <style>\n      {`\n        [data-chart=${id}] {\n          ${Object.entries(config)\n            .filter(([_, { theme, color }]) => theme?.light || color)\n            .map(([key, { theme, color }]) => {\n              return `\n                --color-${key}: ${theme?.light || color};\n              `\n            })\n            .join(\"\")}\n        }\n        .dark [data-chart=${id}] {\n          ${Object.entries(config)\n            .filter(([_, { theme, color }]) => theme?.dark || color)\n            .map(([key, { theme, color }]) => {\n              return `\n                --color-${key}: ${theme?.dark || color};\n              `\n            })\n            .join(\"\")}\n        }\n      `}\n    </style>\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      flipped?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\" | \"none\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      flipped,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (!payload?.length || hideLabel) return null\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(label, payload)}\n          </div>\n        )\n      }\n\n      const item = payload[0]\n      const key = labelKey || item.dataKey || item.name\n      const configLabelKey =\n        item.payload[key as keyof typeof item.payload] || key\n      const itemConfig =\n        typeof configLabelKey === \"string\"\n          ? config[configLabelKey]\n          : config[key as keyof typeof config]\n\n      return (\n        <div className={cn(\"font-medium\", labelClassName)}>\n          {typeof label === \"string\"\n            ? label\n            : itemConfig?.label ||\n              item.payload[key as keyof typeof item.payload]}\n        </div>\n      )\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) return null\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel && tooltipLabel}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = nameKey || item.name || item.dataKey\n            const configLabelKey =\n              item.payload[key as keyof typeof item.payload] || key\n            const itemConfig =\n              typeof configLabelKey === \"string\"\n                ? config[configLabelKey]\n                : config[key as keyof typeof config]\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item.value && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      indicator !== \"none\" && (\n                        <div\n                          className={cn(\"shrink-0\", {\n                            \"h-2.5 w-2.5 rounded-[2px]\": indicator === \"dot\",\n                            \"w-1 rounded-[2px]\": indicator === \"line\",\n                            \"w-0 border border-dashed\": indicator === \"dashed\",\n                            \"my-0.5\": nestLabel && indicator === \"dashed\",\n                          })}\n                          style={{\n                            backgroundColor:\n                              color ||\n                              item.payload.fill ||\n                              (indicator === \"dashed\"\n                                ? \"transparent\"\n                                : item.color),\n                            borderColor: item.color,\n                          }}\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        flipped && \"flex-row-reverse\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel && tooltipLabel}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                        {item.value}\n                      </span>\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    {\n      className,\n      hideIcon = false,\n      payload,\n      verticalAlign = \"bottom\",\n      nameKey,\n      ...props\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) return null\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n        {...props}\n      >\n        {payload.map((item) => {\n          const key = nameKey || item.dataKey\n          const configLabelKey =\n            item.payload?.[key as keyof typeof item.payload] || key\n          const itemConfig =\n            typeof configLabelKey === \"string\"\n              ? config[configLabelKey]\n              : config[key as keyof typeof config]\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n"
    }
  ],
  "type": "components:ui"
}