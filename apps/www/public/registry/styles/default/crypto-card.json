{
  "name": "crypto-card",
  "files": [
    {
      "name": "crypto-card.tsx",
      "content": "import React from \"react\"\nimport {\n  MotionValue,\n  motion,\n  useMotionTemplate,\n  useMotionValue,\n} from \"framer-motion\"\n\ntype PatternProps = {\n  mouseX: MotionValue<number>\n  mouseY: MotionValue<number>\n  randomString: string\n}\n\nconst characters =\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n\nconst generateRandomString = (length: number) => {\n  let result = \"\"\n\n  for (let i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * characters.length))\n  }\n\n  return result\n}\n\nfunction getRndInteger(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min)) + min\n}\n\nfunction Pattern({ mouseX, mouseY, randomString }: PatternProps) {\n  let maskImage = useMotionTemplate`radial-gradient(1000px at ${mouseX}px ${mouseY}px, white, #e66465, transparent)`\n  let style = { maskImage, WebkitMaskImage: maskImage }\n\n  return (\n    <div className=\"pointer-events-none\">\n      <div className=\"absolute inset-0 rounded-2xl [mask-image:linear-gradient(white,transparent)] group-hover:opacity-50\"></div>\n      <motion.div\n        className=\"absolute inset-0 rounded-2xl bg-gradient-to-r from-green-600 to-indigo-600 opacity-0 backdrop-blur-xl transition duration-500 group-hover:opacity-100 dark:opacity-100\"\n        style={style}\n      />\n      <motion.div\n        className=\"absolute inset-0 rounded-2xl opacity-0 mix-blend-overlay group-hover:opacity-100\"\n        style={style}\n      >\n        <p className=\"absolute inset-x-0 h-full whitespace-pre-wrap break-words font-mono text-xs font-bold text-white transition duration-500\">\n          {randomString}\n        </p>\n      </motion.div>\n    </div>\n  )\n}\n\nexport default function CryptoCard({\n  children,\n}: {\n  children?: React.ReactNode\n}) {\n  let mouseX = useMotionValue(0)\n  let mouseY = useMotionValue(0)\n  const [randomString, setRandomString] = React.useState(\"\")\n  const [isHovering, setIsHovering] = React.useState(false)\n\n  const onMouseMove = React.useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      const str = generateRandomString(1500)\n      setRandomString(str)\n      mouseX.set(event.clientX)\n      mouseY.set(event.clientY)\n    },\n    [mouseX, mouseY]\n  )\n\n  return (\n    <div\n      className=\"group relative flex h-96 w-96 items-center justify-center overflow-hidden rounded-2xl bg-white dark:bg-slate-950\"\n      onMouseMove={onMouseMove}\n      onMouseEnter={() => {\n        setIsHovering(true)\n      }}\n      onMouseLeave={() => {\n        setIsHovering(false)\n      }}\n    >\n      {isHovering ? (\n        <Pattern mouseX={mouseX} mouseY={mouseY} randomString={randomString} />\n      ) : null}\n      <div className=\"relative z-10 flex items-center justify-center\">\n        <div className=\"relative flex h-48 w-48 items-center justify-center  px-2\">\n          <div className=\"absolute h-full w-full rounded-full bg-white opacity-0 blur-xl group-hover:opacity-50 dark:bg-slate-950\" />\n\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n"
    }
  ],
  "type": "components:ui"
}