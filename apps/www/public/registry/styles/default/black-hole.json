{
  "name": "black-hole",
  "files": [
    {
      "name": "black-hole.tsx",
      "content": "import React from \"react\"\n\ntype StarType = {\n  duration: string\n  delay: string\n  top: string\n  left: string\n  translateX: string\n  translateY: string\n}\n\nfunction buildStars(numberOfStars: number) {\n  const stars: StarType[] = []\n  for (let i = 0; i < numberOfStars; i++) {\n    stars.push({\n      duration: `${Math.random() * 10}s`,\n      delay: `${Math.random() * 5}s`,\n      top: `${Math.random() * 100}%`,\n      left: `${Math.random() * 100}%`,\n      translateX: `${Math.random() * 300}px`,\n      translateY: `${Math.random() * 300}px`,\n    })\n  }\n  return stars\n}\n\nexport default function BlackHole({\n  children,\n  numberOfStars = 100,\n}: {\n  children?: React.ReactNode\n  numberOfStars?: number\n}) {\n  const bgColor = \"bg-indigo-800\"\n  const stars = React.useMemo(() => buildStars(numberOfStars), [numberOfStars])\n\n  return (\n    <div className=\"relative h-full w-full\">\n      <div className=\"flex h-[600px] w-full animate-rotate-clockwise items-center justify-center\">\n        {children ? (\n          <div\n            className={\n              \"relative z-20 flex h-auto w-[100px] items-center justify-center\"\n            }\n          >\n            {children}\n          </div>\n        ) : null}\n\n        <div\n          className={`pointer-events-none absolute h-[500px] w-[500px] ${bgColor}  pointer-events-none left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2`}\n          style={{\n            // @ts-ignore\n            \"-webkit-mask-image\": `radial-gradient(\n                50% 50% at 50% 50%,\n                rgba(217, 217, 217, 0) 27.08%,\n                #d9d9d9 47.92%,\n                rgba(217, 217, 217, 0.8) 75%,\n                rgba(217, 217, 217, 0) 100%\n              )`,\n            \"mask-image\": `radial-gradient(\n                50% 50% at 50% 50%,\n                rgba(217, 217, 217, 0) 27.08%,\n                #d9d9d9 47.92%,\n                rgba(217, 217, 217, 0.8) 75%,\n                rgba(217, 217, 217, 0) 100%\n              )`,\n            \"webkit-mask-position\": \"0 0\",\n            \"mask-position\": \"0 0\",\n            \"webkit-mask-size\": \"cover\",\n            \"mask-size\": \"cover\",\n          }}\n        >\n          {stars.map((star, index) => {\n            return <Star key={index} star={star} index={index} />\n          })}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction Star({ star, index }: { star: StarType; index: number }) {\n  return (\n    <div\n      key={index}\n      className=\"absolute h-[2px] w-[2px] animate-twinkling rounded-full bg-white\"\n      style={{\n        animationDuration: star.duration,\n        animationDelay: star.delay,\n        top: star.top,\n        left: star.left,\n        transform: `translate(${star.translateX}, ${star.translateY})`,\n      }}\n    ></div>\n  )\n}\n"
    }
  ],
  "type": "components:ui"
}